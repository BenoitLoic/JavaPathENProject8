plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
}

bootJar {
    archiveBaseName = "tourGuide"
    archiveVersion = "1.0.0"
}

group = 'com.ocproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "2021.0.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-dependencies:2021.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.7'

    implementation group: 'org.javamoney', name: 'moneta', version: '1.4.2', ext: 'pom'
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'

    implementation files('libs/TripPricer.jar')
    implementation files('libs/gpsUtil.jar')

    implementation 'org.javamoney.moneta:moneta-core:1.4.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.7'
    implementation 'org.hamcrest:hamcrest-all:1.3'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.0.1'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.withType(Test) {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
}


test {
    finalizedBy jacocoTestReport
    jacoco{
        exclude()
    }
}

testSets {
    integrationTest
    performanceTest
}
integrationTest{
    finalizedBy jacocoIntegrationTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.destination file("${buildDir}/jacocoUTHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/**','**/helper/**'])
        }))
    }
}

jacocoIntegrationTestReport {
    dependsOn integrationTest
    reports {
        xml.required = true
        csv.required = false
        html.destination file("${buildDir}/jacocoITHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/**','**/helper/**'])
        }))
    }
}